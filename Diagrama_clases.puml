@startuml



abstract class ModuloContable{
+getResultadoEconomico(): float
}

abstract class Barco {
    -id: int
    -disponible: bool
    -peso_max: float
    -cant_contenedores_max: int
    -kmRecorridos: float
    -lleva_mat_esp: bool
    -contenedores: []


    +gettersYseters()
    +obtenerPesoActual():float
}


class Barco_basico{
    -init = super().init

    +puede_cargar_esta_carga():bool
    +tiene_lugar():bool
    +cargar():void
}

class Barco_especial{
    -init : super().init

     +puede_cargar_esta_carga():bool
     +tiene_lugar():bool
     +cargar():void
}
abstract class Cargable{
    +puede_cargar_esta_carga():bool
    +tiene_lugar():bool
    +cargar():void
}

class FactoryBarcos{
    +obtener_tipos_barcos(): Barco
    +crear_barco():Barco
}

abstract class Contenedor{
    -materialEspecial: bool
    -diponible: bool
    -cant_de_veces_comple_y_carga_unica :int
    -medidasExterior:Medidas
    -medidasInterior:Medidas
    -volumen_max: float
    -peso_max:float
    -id: int
    -tipo: String
    -precio_transporte_base:float
    -cargas = List<Carga>


    +getters()
    +setters()
    +COUNTER_cant_de_veces_comple_y_carga_unica():void
    +calcular_precio(int distancia):Double
    +peso_contenedor():Double
}

abstract class BuilderContenedor{

    +reset(bool material_especial)
    +get_contenedor():Contenedor
    +set_tipo()
    +set_volumen_maximo()
    +set_peso_maximo()
    +set_medidas_interior()
    +set_medidas_exterior()
}

class BuilderContenedorVentilado{
    +reset(bool material_especial)
    +get_contenedor():Contenedor
    +set_tipo()
    +set_volumen_maximo()
    +set_peso_maximo()
    +set_medidas_interior()
    +set_medidas_exterior()
}

class BuilderContenedorFlatRack{
    +reset(bool material_especial)
    +get_contenedor():Contenedor
    +set_tipo()
    +set_volumen_maximo()
    +set_peso_maximo()
    +set_medidas_interior()
    +set_medidas_exterior()
}

class BuilderContenedoBasico{

    +reset(bool material_especial)
    +get_contenedor():Contenedor
    +set_tipo()
    +set_volumen_maximo()
    +set_peso_maximo()
    +set_medidas_interior()
    +set_medidas_exterior()
}


class BuilderContenedoBasicoHC{

    +reset(bool material_especial)
    +get_contenedor():Contenedor
    +set_tipo()
    +set_volumen_maximo()
    +set_peso_maximo()
    +set_medidas_interior()
    +set_medidas_exterior()
}

class DirectorContenedores{
    +__init__(BuilderContenedor builder)
    +crear_contenedor(bool matEspecial):Contenedor
    +change_builder(BuilderContenedor nuevoBuilder)
}

abstract class Strategy{
    +verificar_carga(Carga carga, Contenedor contenedor): bool
}

class CargaAlimenticiaStrategy{
    +verificar_carga(Carga carga, Contenedor contenedor):bool
    +hay_carga_quimica(Contenedor contenedor):bool
}

class CargaMaquinariaStrategy{
    +verificar_carga(Carga carga, Contenedor contenedor): bool
}

class CargaQuimicaStrategy{
    +verificar_carga(Carga carga, Contenedor contenedor): bool
    +hay_carga_alimenticia(Contenedor contenedor):bool
}

class ManejadorDeCargas{
    -estrategia: Strategy

    +cargar(Carga carga, Contenedor contenedor):void
    +puedeCargar(Carga carga, Contenedor contenedor):bool
    +verificarCarga(Carga carga, Contenedor contenedor):bool
    +getter():Strategy
    +setters(Srategy s):
}


class Camion{
    -id:int
    -contenedor: Contenedor
    -costoFijo: Double
    -disponible: bool

    +getters()
    +setters()
}


enum Categoria{
    -MAQUINARIA = 1
    -ALIMENTICIA = 2
    -QUIMICA = 3

}


class Carga{

    -medidas: Medidas
    -peso: float
    -categoria: Categoria

    +getPrecioCarga():precioCarga
}


class Pedido{
    -retiraEnPuerto: bool
    -contenedorCompleto: bool
    -id:int
    -cargas :List<Carga>
    -containers: List<Contenedor>
    -necesitaTransporteCamion:bool

    +getters()
    +setters()
}

class Cliente{
    -apellido:STring
    -nombre: String
    -id:int
    -pedido: Pedido
    -cargas :List<Carga>

    +getters()
    +setters()
}

class Empresa implements metodosViajes{
    -camiones: List<Camion>
    -barcos:List<Barco>
    -barcoConMenosKM:Barco
    -barcoConMasKM:Barco
    -contenedores: List<Contenedor>

    +actualizar_barco_trotamundo_o_sedentario():
    +camion_disponible():Camion
    +container_con_mas_viajes_con_una_carga():Contenedor
    +getters()
    +setters()
}

abstract class GenerarId{
    +generar_numeros_distintos():int
}

class Medidas{
    -largo: Double
    -ancho:Double
    -alto:Double

    +comparar_medidas():bool
}

abstract class metodosViajes{
    +viajar()
    +definirPrecioViaje(Pedido p): float
}

class tasadorCarga{
    +random()
}




BuilderContenedorVentilado ..|> BuilderContenedor
BuilderContenedoBasico ...|> BuilderContenedor
BuilderContenedoBasicoHC ..|> BuilderContenedor
BuilderContenedorFlatRack ..|> BuilderContenedor

DirectorContenedores ... BuilderContenedor

Contenedor--Empresa
Contenedor--Medidas
Contenedor --|> GenerarId

Strategy <|.. CargaAlimenticiaStrategy
Strategy <|.. CargaMaquinariaStrategy
Strategy <|.. CargaQuimicaStrategy
Strategy -- ManejadorDeCargas
Strategy --- Contenedor

Barco_basico-up-|>Barco
Barco_especial--|>Barco
Barco ..|> ModuloContable
Barco--Medidas
Barco..|>GenerarId
Barco <|--right- FactoryBarcos
Barco--*Empresa


Cargable<|..Barco

tasadorCarga<|..Carga


Camion--Empresa

Contenedor--Empresa
Contenedor--Medidas

Pedido--Empresa
Pedido..|>GenerarId
Pedido*--Cliente

Carga*--Cliente
Carga*--Pedido
Carga..|>GenerarId
Carga--Medidas
Carga o-- Categoria

@enduml